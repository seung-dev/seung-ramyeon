plugins {
	id "java"
	id "org.springframework.boot" version "3.1.4"
	id "io.spring.dependency-management" version "1.1.3"
}

group = "seung"
version = "23.10.30.00"

java {
	sourceCompatibility = "17"
}

repositories {
	mavenCentral()
	maven { url "https://jitpack.io" }
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {

	// test
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.2")
	testImplementation("org.springframework.security:spring-security-test")
	
	// spring
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-validation")
	implementation("org.springframework.boot:spring-boot-starter-security")
	//implementation("org.springframework.boot:spring-boot-starter-aop")
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
	//implementation("org.springframework.boot:spring-boot-starter-mail")
	//implementation("org.springframework.boot:spring-boot-starter-quartz")
	//implementation("org.springframework.boot:spring-boot-starter-amqp")
	compileOnly("org.springframework.boot:spring-boot-devtools")
	
	// database
	implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.1")
	//implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	runtimeOnly("org.postgresql:postgresql")
	//runtimeOnly("com.microsoft.sqlserver:mssql-jdbc")
	//runtimeOnly("com.oracle.ojdbc:ojdbc8")
	//runtimeOnly("mysql:mysql-connector-java")
	
	// jwt
	implementation("io.jsonwebtoken:jjwt-api:0.11.5")
	runtimeOnly("io.jsonwebtoken:jjwt-impl:0.11.5")
	runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.11.5")
	
	// s3
	implementation platform("com.amazonaws:aws-java-sdk-bom:1.11.968")
	implementation "com.amazonaws:aws-java-sdk-s3"
	
	// seung
	implementation(project(path: ":seung-kimchi", configuration: "default")) {
		exclude module: "slf4j-simple"
	}
	
	// lib
	implementation fileTree(dir: "libs", include: "*.jar")
	
}

ext["log4j2.version"] = "2.17.2"

test {
	useJUnitPlatform()
}

springBoot {
	buildInfo()
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

tasks.withType(Test) {
	defaultCharacterEncoding = "UTF-8"
}

tasks.withType(Javadoc) {
	options.encoding = "UTF-8"
}

def profile = project.hasProperty("spring.profiles.active") ? project.property("spring.profiles.active").toString() : "loc"

tasks.withType(Jar) {
	destinationDirectory = file("./build/${profile}")
//	destinationDirectory = file("d:/build/${profile}")
//	archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

jar {
	enabled = false// plain jar
	if("loc" != profile) {
		processResources.exclude("profile-loc/**")
	}
	if("dev" != profile) {
		processResources.exclude("profile-dev/**")
	}
	if("ops" != profile) {
		processResources.exclude("profile-ops/**")
	}
}
